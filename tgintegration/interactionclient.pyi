# Stubs for tgintegration.integrationtestclient (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.


# noinspection PyMissingConstructor
from logging import Logger
from typing import *

from pyrogram import ChatAction, Client
from pyrogram.api import Object
from pyrogram.client.filters.filter import Filter
from tgintegration import AwaitableAction, Response


class InteractionClient(Client):
    logger: Logger = ...

    def __init__(self, session_name: str, api_id: int or str = None, api_hash: str = None,
                 proxy: dict = None, test_mode: bool = False, phone_number: str = None,
                 phone_code: str or callable = None, password: str = None, force_sms: bool = False,
                 first_name: str = None, last_name: str = None, workers: int = 4,
                 workdir: str = ".") -> Any:
        super().__init__(session_name, api_id, api_hash, proxy, test_mode, phone_number,
                         phone_code, password, force_sms, first_name, last_name, workers, workdir)
        ...

    def send(self, data: Object) -> Any: ...

    def start(self, debug: bool = ...): ...

    def ping_bot(
            self,
            peer: int or str,
            override_messages: List[str] = None,
            max_wait_response: float = None,
            min_wait_consecutive: float = None,
    ) -> Response: ...

    def act_await_response(self, action: AwaitableAction, raise_: bool = ...) -> Response: ...

    def send_audio_await(
            self,
            chat_id: int or str,
            audio: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            performer: str = ...,
            title: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...,
    ) -> Response:
        ...

    def send_chat_action_await(
            self,
            chat_id: int or str,
            action: ChatAction or str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            progress: Callable = ...
    ) -> Response:
        ...

    def send_contact_await(
            self,
            chat_id: int or str,
            phone_number: str,
            first_name: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            last_name: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response:
        ...

    def send_document_await(
            self,
            chat_id: int or str,
            document: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            caption: str = ...,
            parse_mode: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_location_await(
            self,
            chat_id: int or str,
            latitude: float,
            longitude: float,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_media_group_await(
            self,
            chat_id: int or str,
            media: list,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_message_await(
            self,
            chat_id: int or str,
            text,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            **kwargs
    ) -> Response: ...

    def send_command_await(
            self,
            chat_id: int or str,
            command: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
    ) -> Response: ...

    def send_photo_await(
            self,
            chat_id: int or str,
            photo: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            caption: str = ...,
            parse_mode: str = ...,
            ttl_seconds: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_sticker_await(
            self,
            chat_id: int or str,
            sticker: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_venue_await(
            self,
            chat_id: int or str,
            latitude: float,
            longitude: float,
            title: str,
            address: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            foursquare_id: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_video_await(
            self,
            chat_id: int or str,
            video: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            width: int = ...,
            height: int = ...,
            thumb: str = ...,
            supports_streaming: bool = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_video_note_await(
            self,
            chat_id: int or str,
            video_note: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            duration: int = ...,
            length: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_voice_await(
            self,
            chat_id: int or str,
            voice: str,
            filters: Filter = ...,
            num_expected: int = ...,
            max_wait: float = ...,
            min_wait_consecutive: float = ...,
            raise_: bool = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...
