# Stubs for tgintegration.integrationtestclient (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
from typing import Any, Callable, List, Union

from pyrogram import ChatAction, Filters
from pyrogram.api import Object
from pyrogram.api.types import PeerUser
from tgintegration.interactionclient import InteractionClient, Response


# noinspection PyMissingConstructor
class IntegrationTestClient(InteractionClient):
    bot_under_test: Union[int, str] = ...
    max_wait_response: float = ...
    min_wait_consecutive: float = ...
    global_delay: float = ...
    peer: PeerUser = ...
    peer_id: int = ...

    def __init__(self, session_name: str, api_id: int, api_hash: str, phone_number: str,
                 bot_under_test: Union[int, str], max_wait_response: int = ...,
                 min_wait_consecutive: int = ..., global_delay: int = ...,
                 **kwargs: Any) -> Any: ...

    def send(self, data: Object) -> Any: ...

    def start(self, debug: bool = ...): ...

    def send_audio_await(
            self,
            audio: str,
            filters: Filters = ...,
            num_expected: int = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            performer: str = ...,
            title: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...) -> Response:
        ...

    def send_chat_action_await(
            self,
            action: ChatAction or str,
            filters: Filters = ...,
            num_expected: int = ...,
            progress: Callable = ...
    ) -> Response:
        ...

    def send_contact_await(
            self,
            chat_id: int or str,
            phone_number: str,
            first_name: str,
            filters: Filters = ...,
            num_expected: int = ...,
            last_name: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response:
        ...

    def send_document_await(
            self,
            document: str,
            filters: Filters = ...,
            num_expected: int = ...,
            caption: str = ...,
            parse_mode: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_location_await(
            self,
            latitude: float,
            longitude: float,
            filters: Filters = ...,
            num_expected: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_media_group_await(
            self,
            media: list,
            filters: Filters = ...,
            num_expected: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_message_await(
            self,
            text,
            filters: Filters = ...,
            num_expected: int = ...,
            **kwargs
    ) -> Response: ...

    def send_command_await(
            self,
            command: str,
            filters: Filters = ...,
            num_expected: int = ...
    ) -> Response: ...

    def send_photo_await(
            self,
            photo: str,
            filters: Filters = ...,
            num_expected: int = ...,
            caption: str = ...,
            parse_mode: str = ...,
            ttl_seconds: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_sticker_await(
            self,
            sticker: str,
            filters: Filters = ...,
            num_expected: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_venue_await(
            self,
            latitude: float,
            longitude: float,
            title: str,
            address: str,
            filters: Filters = ...,
            num_expected: int = ...,
            foursquare_id: str = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...
    ) -> Response: ...

    def send_video_await(
            self,
            video: str,
            filters: Filters = ...,
            num_expected: int = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            width: int = ...,
            height: int = ...,
            thumb: str = ...,
            supports_streaming: bool = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_video_note_await(
            self,
            video_note: str,
            filters: Filters = ...,
            num_expected: int = ...,
            duration: int = ...,
            length: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def send_voice_await(
            self,
            voice: str,
            filters: Filters = ...,
            num_expected: int = ...,
            caption: str = ...,
            parse_mode: str = ...,
            duration: int = ...,
            disable_notification: bool = ...,
            reply_to_message_id: int = ...,
            progress: Callable = ...
    ) -> Response: ...

    def ping(self, override_messages: List[str] = None) -> Response:

    def clear_chat(self) -> None: ...

    def _make_awaitable_method(self, name, method) -> None: ...

    def _make_default_filters(self, user_filters) -> Filters: ...
